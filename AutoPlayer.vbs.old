' AutoPlayer 0.1
' TODO:
'  - Check for SQL injection vulns
'  - Finish configuration sheet

Option Explicit

Const DebugMode = False

Const MaxTracksAlb = 2			' Max tracks per album per day
Const MaxTracksArt = 6			' Max tracks per artist per day

' Caution: These numbers must be in non-decreasing order!
Const MinBaseTimeNew = 10		' Minimum time (days) between repeats of the same song (not skipped yet)
Const MinBaseTime_50 = 30		' repeat for 5-star tracks
Const MinBaseTime_45 = 45
Const MinBaseTime_40 = 60
Const MinBaseTime_35 = 75
Const MinBaseTime_30 = 90
Const MinBaseTime_25 = 105
Const MinBaseTime_20 = 150
Const MinBaseTime_15 = 200
Const MinBaseTime_10 = 250
Const MinBaseTime_05 = 325

Const IncreaseFactor = 0.1 ' Factor to increase/decrease repeats if there are too many / too few tracks

' Default allowed Mood tags, in order of "activity"
Dim KnownMoods : KnownMoods = Array("Tranquil", "Mellow", "Neutral", "Upbeat", "Wild")


' ==========
' Do not change anything below here!
' ==========

Dim MinGraceTimeNew : MinGraceTimeNew = MinBaseTimeNew
Dim MinGraceTime_50 : MinGraceTime_50 = MinBaseTime_50
Dim MinGraceTime_45 : MinGraceTime_45 = MinBaseTime_45
Dim MinGraceTime_40 : MinGraceTime_40 = MinBaseTime_40
Dim MinGraceTime_35 : MinGraceTime_35 = MinBaseTime_35
Dim MinGraceTime_30 : MinGraceTime_30 = MinBaseTime_30
Dim MinGraceTime_25 : MinGraceTime_25 = MinBaseTime_25
Dim MinGraceTime_20 : MinGraceTime_20 = MinBaseTime_20
Dim MinGraceTime_15 : MinGraceTime_15 = MinBaseTime_15
Dim MinGraceTime_10 : MinGraceTime_10 = MinBaseTime_10
Dim MinGraceTime_05 : MinGraceTime_05 = MinBaseTime_05

Const MaxGraceTime = 999

' Get current time for use in SQL strings
Const CurrTime = "(JulianDay('now','localtime')-2415018.5)"


' TODO: Show config panel
Sub InitConfigSheet(Panel)
	Dim btn : Set btn = SDB.UI.NewButton(Panel)
	btn.Common.SetRect 10, 10, 130, 21
	btn.Caption = "Change configuration"
	Script.RegisterEvent btn, "OnClick", "InitExtraSheet"
End Sub


Sub OnGraceTimeChange(edt)
	SDB.MessageBox "Time changed!", 0, 4
End Sub


' Creates UI objects for a 
Function CreateGraceTimeLine(Parent, ByVal xoff, ByVal yoff, LeftLabelText, LabelWidth, SpinWidth)
	Dim LeftLabel : Set LeftLabel = SDB.UI.NewLabel(Parent)
	LeftLabel.Common.SetRect xoff, yoff+4, LabelWidth, 25
	LeftLabel.Caption = "Interval " & LeftLabelText & ":"
	xoff  = xoff + LabelWidth + 5
	
	Dim GraceTimeEdit : Set GraceTimeEdit = SDB.UI.NewSpinEdit(Parent)
	GraceTimeEdit.Common.SetRect xoff, yoff, SpinWidth, 25
	GraceTimeEdit.Common.ControlName = LeftLabelText
	GraceTimeEdit.MinValue = 0
	GraceTimeEdit.MaxValue = MaxGraceTime
	xoff = xoff + SpinWidth + 5
	
	Dim RightLabel : Set RightLabel = SDB.UI.NewLabel(Parent)
	RightLabel.Common.SetRect xoff, yoff+4, 50, 25
	RightLabel.Caption = "days"
	
	Script.RegisterEvent GraceTimeEdit, "OnChange", "OnGraceTimeChange"
	Set CreateGraceTimeLine = GraceTimeEdit
End Function


Sub InitExtraSheet()
	Dim Ini : Set Ini = SDB.IniFile
	
	' Set default values if they have not been set
	If Ini.StringValue("AutoPlayer", "MinGraceTimeNew") = "" Then
		Ini.IntValue("AutoPlayer", "MinGraceTimeNew") = MinGraceTimeNew
	End If
	If Ini.StringValue("AutoPlayer", "MinGraceTime50") = "" Then
		Ini.IntValue("AutoPlayer", "MinGraceTime50") = MinGraceTime_50
	End If
	If Ini.StringValue("AutoPlayer", "MinGraceTime45") = "" Then
		Ini.IntValue("AutoPlayer", "MinGraceTime45") = MinGraceTime_45
	End If
	If Ini.StringValue("AutoPlayer", "MinGraceTime40") = "" Then
		Ini.IntValue("AutoPlayer", "MinGraceTime40") = MinGraceTime_40
	End If
	If Ini.StringValue("AutoPlayer", "MinGraceTime35") = "" Then
		Ini.IntValue("AutoPlayer", "MinGraceTime35") = MinGraceTime_35
	End If
	If Ini.StringValue("AutoPlayer", "MinGraceTime30") = "" Then
		Ini.IntValue("AutoPlayer", "MinGraceTime30") = MinGraceTime_30
	End If
	If Ini.StringValue("AutoPlayer", "MinGraceTime25") = "" Then
		Ini.IntValue("AutoPlayer", "MinGraceTime25") = MinGraceTime_25
	End If
	If Ini.StringValue("AutoPlayer", "MinGraceTime20") = "" Then
		Ini.IntValue("AutoPlayer", "MinGraceTime20") = MinGraceTime_20
	End If
	If Ini.StringValue("AutoPlayer", "MinGraceTime15") = "" Then
		Ini.IntValue("AutoPlayer", "MinGraceTime15") = MinGraceTime_15
	End If
	If Ini.StringValue("AutoPlayer", "MinGraceTime10") = "" Then
		Ini.IntValue("AutoPlayer", "MinGraceTime10") = MinGraceTime_10
	End If
	If Ini.StringValue("AutoPlayer", "MinGraceTime05") = "" Then
		Ini.IntValue("AutoPlayer", "MinGraceTime05") = MinGraceTime_05
	End If
	
	' Now load ini file values
	MinGraceTimeNew = Ini.IntValue("AutoPlayer", "MinGraceTimeNew")
	MinGraceTime_50 = Ini.IntValue("AutoPlayer", "MinGraceTime50")
	MinGraceTime_45 = Ini.IntValue("AutoPlayer", "MinGraceTime45")
	MinGraceTime_40 = Ini.IntValue("AutoPlayer", "MinGraceTime40")
	MinGraceTime_35 = Ini.IntValue("AutoPlayer", "MinGraceTime35")
	MinGraceTime_30 = Ini.IntValue("AutoPlayer", "MinGraceTime30")
	MinGraceTime_25 = Ini.IntValue("AutoPlayer", "MinGraceTime25")
	MinGraceTime_20 = Ini.IntValue("AutoPlayer", "MinGraceTime20")
	MinGraceTime_15 = Ini.IntValue("AutoPlayer", "MinGraceTime15")
	MinGraceTime_10 = Ini.IntValue("AutoPlayer", "MinGraceTime10")
	MinGraceTime_05 = Ini.IntValue("AutoPlayer", "MinGraceTime05")
	
	' Show config panel
	Dim Form : Set Form = SDB.UI.NewForm
	Form.Common.SetRect 100, 100, 460, 375
	Form.BorderStyle = 3
	Form.FormPosition = 4
	Form.Caption = "AutoPlayer Settings"
	
	Const DeltaX = 0
	Const DeltaY = 30
	
	Dim X : X = 10
	Dim Y : Y = 10

	Const LeftLabelWidth = 100
	Const SpinWidth = 45
	Dim GraceTimeNewEdit : Set GraceTimeNewEdit = CreateGraceTimeLine(Form, X, Y, "New", LeftLabelWidth, SpinWidth) : Y = Y + DeltaY
	Dim GraceTime50Edit  : Set GraceTime50Edit  = CreateGraceTimeLine(Form, X, Y, "Five", LeftLabelWidth, SpinWidth) : Y = Y + DeltaY
	Dim GraceTime45Edit  : Set GraceTime45Edit  = CreateGraceTimeLine(Form, X, Y, "FourH", LeftLabelWidth, SpinWidth) : Y = Y + DeltaY
	Dim GraceTime40Edit  : Set GraceTime40Edit  = CreateGraceTimeLine(Form, X, Y, "Four", LeftLabelWidth, SpinWidth) : Y = Y + DeltaY
	Dim GraceTime35Edit  : Set GraceTime35Edit  = CreateGraceTimeLine(Form, X, Y, "ThreeH", LeftLabelWidth, SpinWidth) : Y = Y + DeltaY
	Dim GraceTime30Edit  : Set GraceTime30Edit  = CreateGraceTimeLine(Form, X, Y, "Three", LeftLabelWidth, SpinWidth) : Y = Y + DeltaY
	Dim GraceTime25Edit  : Set GraceTime25Edit  = CreateGraceTimeLine(Form, X, Y, "TwoH", LeftLabelWidth, SpinWidth) : Y = Y + DeltaY
	Dim GraceTime20Edit  : Set GraceTime20Edit  = CreateGraceTimeLine(Form, X, Y, "Two", LeftLabelWidth, SpinWidth) : Y = Y + DeltaY
	Dim GraceTime15Edit  : Set GraceTime15Edit  = CreateGraceTimeLine(Form, X, Y, "OneH", LeftLabelWidth, SpinWidth) : Y = Y + DeltaY
	Dim GraceTime10Edit  : Set GraceTime10Edit  = CreateGraceTimeLine(Form, X, Y, "One", LeftLabelWidth, SpinWidth) : Y = Y + DeltaY
	Dim GraceTime05Edit  : Set GraceTime05Edit  = CreateGraceTimeLine(Form, X, Y, "ZeroH", LeftLabelWidth, SpinWidth) : Y = Y + DeltaY
	
	GraceTimeNewEdit.Value = MinGraceTimeNew
	GraceTime50Edit.Value = MinGraceTime_50
	GraceTime45Edit.Value = MinGraceTime_45
	GraceTime40Edit.Value = MinGraceTime_40
	GraceTime35Edit.Value = MinGraceTime_35
	GraceTime30Edit.Value = MinGraceTime_30
	GraceTime25Edit.Value = MinGraceTime_25
	GraceTime20Edit.Value = MinGraceTime_20
	GraceTime15Edit.Value = MinGraceTime_15
	GraceTime10Edit.Value = MinGraceTime_10
	GraceTime05Edit.Value = MinGraceTime_05
	
	' Add OK button
	Dim btnOK : Set btnOK = SDB.UI.NewButton(Form)
	btnOK.Common.SetRect 200, 200, 50, 20
	'Script.RegisterEvent btnOK, "OnClick", 
	' Finally show the configuration dialogue
	Set SDB.Objects("AutoPlayerOptsForm") = Form
	Form.ShowModal
	
	Set Form = Nothing
End Sub

' TODO: write config to file
Sub CloseConfigSheet(Panel, SaveConfig)
	SDB.MessageBox "Saving config", 0, 4
	
'	If SaveConfig Then
'		MinGraceTimeNew = GraceTimeNewEdit.Value
		
'		Ini.IntValue("AutoPlayer", "MinGraceTimeNew") = MinGraceTimeNew
'	End If
End Sub


' Writes a debug message if debug mode is enabled.
' Does nothing otherwise.
Sub DbgMsg(str)
	If DebugMode Then
		SDB.Tools.OutputDebugString("AP: " & str)
	End If
End Sub


Function FixSearchString(Str)
  Str = Replace(Str,"'","''") '<--- Single quotes are escaped with another single quote
  FixSearchString = Str
End Function


' Orders Moods by their "activity"
Function GetMoodDifference(Mood1, Mood2)
	Dim Index1 : Index1 = -1
	Dim Index2 : Index2 = -1
	Dim j
	
	For j = 0 To UBound(KnownMoods)
		If InStr(KnownMoods(j), Mood1) <> 0 Then
			Index1 = j
		End If
		If InStr(KnownMoods(j), Mood2) <> 0 Then
			Index2 = j
		End If
	Next
	
	If Index1 = 0 Or Index2 = 0 Then
		GetMoodDifference = 0
		Exit Function
	End If
	
	If Index1 > Index2 Then
		GetMoodDifference = 1
	ElseIf Index1 < Index2 Then
		GetMoodDifference = -1
	Else
		GetMoodDifferece = 0
	End If
End Function

	
'
' Checks if a track can be queued for Now Playing
' This is true if all of the following conditions hold:
'  - MaxTracks per album have not been reached
'  - MaxTracks per artist have not been reached
'  - The track is not yet in the Now Playing list
'  - The track is in the database
'
Function IsTrackOK(Song)
	IsTrackOK = False
	
	' Sanity Check
	If Song.IsntInDB Then
		DbgMsg("Rejecting " & Song.ArtistName & " - " & Song.Title & ": Track is not in library.")
		Exit Function
	End If
	
	Dim n
	' Count number of songs from this album that have been played in the last 24 hours
	n = CInt(SDB.Database.OpenSQL("SELECT COUNT(*) FROM Songs " &_
		  "WHERE Album = '"       & FixSearchString(Song.AlbumName)       & "' " &_ 
		    "AND AlbumArtist = '" & FixSearchString(Song.AlbumArtistName) & "' " &_
		    "AND " & CurrTime & " - LastTimePlayed < 1").ValueByIndex(0))
		
	If n >= MaxTracksAlb Then
		DbgMsg("Rejecting " & Song.ArtistName & " - " & Song.Title & ": Max tracks / album reached")
		Exit Function
	End If
	
	' Count number of songs from this artist that have been played in the last 24 hours
	n = CInt(SDB.Database.OpenSQL("SELECT COUNT(*) FROM Songs " &_
		"WHERE Artist = '" & FixSearchString(Song.ArtistName) & "' " &_
		"AND " & CurrTime & " - LastTimePlayed  < 1").ValueByIndex(0))
		
	If n >= MaxTracksArt And Song.AlbumArtistName <> "Various Artists" Then
		DbgMsg("Rejecting " & Song.ArtistName & " - " & Song.Title &_
				": Max tracks / artist reached")
		Exit Function
	End If
	
	' Do not play a track from an album/artist if it's in the now playing list
	' or a track of the same rating is present in the Now Playing list
	Dim i
	Dim NowPlayingSong
	Dim TrackSimilarRatingCount : TrackSimilarRatingCount = 0
	
	For i = 0 To SDB.Player.CurrentSongList.Count-1
		Set NowPlayingSong = SDB.Player.CurrentSongList.Item(i)
		If NowPlayingSong.AlbumName = Song.AlbumName Or NowPlayingSong.AlbumArtistName = Song.AlbumArtistName Or NowPlayingSong.Title = Song.Title Then
			DbgMsg("Rejecting " & Song.ArtistName & " - " & Song.Title & ": Similar tracks already in NowPlaying list")
			Exit Function
		End If
		
		If Song.SkipCount <> 0 And NowPlayingSong.SkipCount <> 0 And NowPlayingSong.Rating = Song.Rating Then
			TrackSimilarRatingCount = TrackSimilarRatingCount + 1
			If TrackSimilarRatingCount >= 2 Then
				DbgMsg("Rejecting " & Song.ArtistName & " - " & Song.Title &_
						": Too many tracks with same rating in Now Playing list")
				Exit Function
			End If
		End If	
	Next
	
	IsTrackOK = True
End Function



Function MoodToIndex(Mood)
	Dim i
	For i=0 To UBound(KnownMoods)
		If KnownMoods(i) = Mood Then
			MoodToIndex = i
			Exit Function
		End If
	Next
End Function


' Generates a new track to be queued for Now Playing
Function GenerateNewTrack

	' Select only tracks that have not been played for some time
	Dim QueryString
	Dim Count : Count = -1
	Dim LoopCount : LoopCount = 0
	
	Do
		MinGraceTime_05 = CInt(MinBaseTime_05*(1-IncreaseFactor*LoopCount))
		MinGraceTime_10 = CInt(MinBaseTime_10*(1-IncreaseFactor*LoopCount))
		MinGraceTime_15 = CInt(MinBaseTime_15*(1-IncreaseFactor*LoopCount))
		MinGraceTime_20 = CInt(MinBaseTime_20*(1-IncreaseFactor*LoopCount))
		MinGraceTime_25 = CInt(MinBaseTime_25*(1-IncreaseFactor*LoopCount))
		MinGraceTime_30 = CInt(MinBaseTime_30*(1-IncreaseFactor*LoopCount))
		MinGraceTime_35 = CInt(MinBaseTime_35*(1-IncreaseFactor*LoopCount))
		MinGraceTime_40 = CInt(MinBaseTime_40*(1-IncreaseFactor*LoopCount))
		MinGraceTime_45 = CInt(MinBaseTime_45*(1-IncreaseFactor*LoopCount))
		MinGraceTime_50 = CInt(MinBaseTime_50*(1-IncreaseFactor*LoopCount))
		
		QueryString = "Custom3 NOT LIKE '%Archive%' AND PlayCounter > 0 AND (" &_
			"(SkipCount = 0 AND " & CurrTime & "-LastTimePlayed > " & MinGraceTimeNew & ") OR " &_
			"(SkipCount > 0 AND " & CurrTime & "-LastTimePlayed > " & MinGraceTime_05 & ") OR " &_
			"(SkipCount > 0 AND Rating > 10 AND " & CurrTime & "-LastTimePlayed > " & MinGraceTime_10 & ") OR" &_
			"(SkipCount > 0 AND Rating > 20 AND " & CurrTime & "-LastTimePlayed > " & MinGraceTime_15 & ") OR" &_
			"(SkipCount > 0 AND Rating > 30 AND " & CurrTime & "-LastTimePlayed > " & MinGraceTime_20 & ") OR" &_
			"(SkipCount > 0 AND Rating > 40 AND " & CurrTime & "-LastTimePlayed > " & MinGraceTime_25 & ") OR" &_
			"(SkipCount > 0 AND Rating > 50 AND " & CurrTime & "-LastTimePlayed > " & MinGraceTime_30 & ") OR" &_
			"(SkipCount > 0 AND Rating > 60 AND " & CurrTime & "-LastTimePlayed > " & MinGraceTime_35 & ") OR" &_
			"(SkipCount > 0 AND Rating > 70 AND " & CurrTime & "-LastTimePlayed > " & MinGraceTime_40 & ") OR" &_
			"(SkipCount > 0 AND Rating > 80 AND " & CurrTime & "-LastTimePlayed > " & MinGraceTime_45 & ") OR" &_
			"(SkipCount > 0 AND Rating > 90 AND " & CurrTime & "-LastTimePlayed > " & MinGraceTime_50 & ") )"
			
		Count = CInt(SDB.Database.OpenSQL("SELECT COUNT(*) FROM Songs WHERE " & QueryString).ValueByIndex(0))
		LoopCount = LoopCount+1
	Loop While LoopCount < 5 And Count < 50
	
	' Get previous song with a mood tag.
	' if there is no track with a mood tag in the current now playing list,
	' take the last track.
	Dim Idx : Idx = SDB.Player.CurrentSongList.Count-1
	Dim ChangeMood : ChangeMood = False
	Dim LastSong : Set LastSong = Nothing

	Do While Idx >= 0
		If SDB.Player.CurrentSongList.Item(Idx).Mood <> "" Then
			Set LastSong = SDB.Player.CurrentSongList.Item(Idx)
			Exit Do
		End If
		Idx = Idx-1
	Loop
	
	If Idx > 0 Then
		Dim Idx2 : Idx2 = Idx-1
		Do While Idx2 >= 0
			If SDB.Player.CurrentSongList.Item(Idx2).Mood <> "" Then
				ChangeMood = (SDB.Player.CurrentSongList.Item(Idx2).Mood = LastSong.Mood)
				Exit Do
			End If
			Idx2 = Idx2-1
		Loop
	End If
	
	If LastSong Is Nothing And SDB.Player.CurrentSongList.Count > 0 Then
		Set LastSong = SDB.Player.CurrentSongList.Item(SDB.Player.CurrentSongList.Count-1)
	End If
	
	
	'
	' Limit track search to only consider "neighbouring" moods or untagged files
	' See KnownMoods array at the top of the file
	'
	If (Not LastSong Is Nothing) And LastSong.Mood <> "" Then
		If Not ChangeMood Then
			' Require at least 2 tracks of the same mood in a row
			QueryString = QueryString & " AND (Mood = '" & LastSong.Mood & "')"
		Else
			Select Case LastSong.Mood
			Case "Morose"
				QueryString = QueryString & " AND (Mood = 'Morose' OR Mood = 'Tranquil')"
			Case "Tranquil"
				QueryString = QueryString & " AND (Mood = 'Morose' OR Mood = 'Tranquil' OR Mood = 'Mellow')"
			Case "Mellow"
				QueryString = QueryString & " AND (Mood = 'Tranquil' OR Mood = 'Mellow' OR Mood = 'Neutral')"
			Case "Neutral"
				QueryString = QueryString & " AND (Mood = 'Mellow' OR Mood = 'Neutral' OR Mood = 'Upbeat' OR Mood = '')"
			Case "Upbeat"
				QueryString = QueryString & " AND (Mood = 'Neutral' OR Mood = 'Upbeat' OR Mood = 'Wild')"
			Case "Wild"
				QueryString = QueryString & " AND (Mood = 'Wild' OR Mood = 'Upbeat')"
			Case Else
				QueryString = QueryString & " AND (Mood = 'Neutral' OR Mood = '')"
			End Select
		End If
	End If
	
	Set LastSong = Nothing
	
	DbgMsg("Song Count = " & SDB.Database.OpenSQL("SELECT COUNT(*) FROM Songs WHERE " & QueryString).ValueByIndex(0))
	
	' Select tracks more often which haven't been played in a long time
	QueryString = QueryString & " ORDER BY ((RANDOM(*)/9223372036854775807.0) * ( (" & CurrTime & "-LastTimePlayed) / (" &_
		"CASE " &_
			"WHEN SkipCount = 0 THEN " & MinGraceTimeNew & ".0 " &_
			"WHEN SkipCount > 0 AND Rating <  10 AND Rating <> -1 THEN " & MinGraceTime_05 & ".0 " &_
			"WHEN SkipCount > 0 AND Rating >= 10 AND Rating <  20 THEN " & MinGraceTime_10 & ".0 " &_
			"WHEN SkipCount > 0 AND Rating >= 20 AND Rating <  30 THEN " & MinGraceTime_15 & ".0 " &_
			"WHEN SkipCount > 0 AND Rating >= 30 AND Rating <  40 THEN " & MinGraceTime_20 & ".0 " &_
			"WHEN SkipCount > 0 AND Rating >= 40 AND Rating <  50 THEN " & MinGraceTime_25 & ".0 " &_
			"WHEN SkipCount > 0 AND Rating >= 50 AND Rating <  60 THEN " & MinGraceTime_30 & ".0 " &_
			"WHEN SkipCount > 0 AND Rating >= 60 AND Rating <  70 THEN " & MinGraceTime_35 & ".0 " &_
			"WHEN SkipCount > 0 AND Rating >= 70 AND Rating <  80 THEN " & MinGraceTime_40 & ".0 " &_
			"WHEN SkipCount > 0 AND Rating >= 80 AND Rating <  90 THEN " & MinGraceTime_45 & ".0 " &_
			"WHEN SkipCount > 0 AND Rating >= 90 AND Rating < 100 THEN " & MinGraceTime_50 & ".0 " &_
		"END" &_
		"))-1) DESC" ' High weights to the front
	
	' Clear message queue first
	SDB.ProcessMessages
	
	' Now query the SQL DB
	Dim Iter : Set Iter = SDB.Database.QuerySongs(QueryString)
	
	Do Until Iter.EOF
		' Check tracks if they can be inserted into the Now Playing list
		If IsTrackOK(Iter.Item) Then
			If SDB.Tools.FileSystem.FileExists(Iter.Item.Path) Then
				DbgMsg("NowPlayingAdd '" & Iter.Item.ArtistName & " - " & Iter.Item.Title & "'")
				
				Set GenerateNewTrack = Iter.Item
				Set Iter = Nothing
				Exit Function
			Else
				DbgMsg("Rejecting " & Iter.Item.ArtistName & " - " & Iter.Item.Title & ": File does not exist")
			End If	
		End If
		Iter.Next
	Loop
	
	' Clean up
	Set Iter = Nothing
	SDB.ProcessMessages
	
	' No suitable track found
	DbgMsg("No suitable track found, ignoring track constraints")
	Set Iter = SDB.Database.QuerySongs(QueryString)
	
	' Do not play a track from an album/artist if it's in the now playing list
	Dim i
	Dim NowPlayingSong
	Dim TrackOK : TrackOK = True
	Do Until Iter.EOF
		For i = 0 To SDB.Player.CurrentSongList.Count-1
			Set NowPlayingSong = SDB.Player.CurrentSongList.Item(i)
			If NowPlayingSong.ID = Iter.Item.ID Then
				DbgMsg("Rejecting " & Iter.Item.ArtistName & " - " & Iter.Item.Title & ": Track already in Now Playing list")
				TrackOK = False
				Exit For
			Else
				If Not SDB.Tools.FileSystem.FileExists(Iter.Item.Path) Then
					DbgMsg("Rejecting " & Iter.Item.ArtistName & " - " & Iter.Item.Title & ": File does not exist")
					TrackOK = False
					Exit For
				End If
			End If
		Next
		
		If TrackOK Then
			' Add it to the now playing list
			DbgMsg("NowPlayingAdd '" & Iter.Item.ArtistName & " - " & Iter.Item.Title & "'")
			
			Set GenerateNewTrack = Iter.Item
			Set NowPlayingSong = Nothing
			Set Iter = Nothing
			Exit Function
		End If
		
		' Check next track
		Iter.Next
	Loop
	
	Set NowPlayingSong = Nothing
	
	' Next try: Select songs that have a high PlayCount/SkipCount ratio.
	DbgMsg("No suitable track found, trying favourite tracks")
	
	QueryString = "Custom3 NOT LIKE '%Archive%' AND (" & CurrTime & " - LastTimePlayed > " & MinGraceTime_50 & ") "
	
	' Get previous song
	Idx = SDB.Player.CurrentSongList.Count-1
	ChangeMood = False
	Set LastSong = Nothing

	Do While Idx >= 0
		If SDB.Player.CurrentSongList.Item(Idx).Mood <> "" Then
			Set LastSong = SDB.Player.CurrentSongList.Item(Idx)
			Exit Do
		End If
		Idx = Idx-1
	Loop
	
	If Idx > 0 Then
		Idx2 = Idx-1
		Do While Idx2 >= 0
			If SDB.Player.CurrentSongList.Item(Idx2).Mood <> "" Then
				ChangeMood = (SDB.Player.CurrentSongList.Item(Idx2).Mood = LastSong.Mood)
				Exit Do
			End If
			Idx2 = Idx2-1
		Loop
	End If
	
	If LastSong Is Nothing And SDB.Player.CurrentSongList.Count > 0 Then
		Set LastSong = SDB.Player.CurrentSongList.Item(SDB.Player.CurrentSongList.Count-1)
	End If
	
	' Only consider "neighbouring" moods or untagged files
	' Order: Morose < Tranquil < Mellow < Neutral < Upbeat < Wild
	If (Not LastSong Is Nothing) And LastSong.Mood <> "" Then
		If Not ChangeMood Then
			QueryString = QueryString & " AND (Mood = '" & LastSong.Mood & "' OR Mood = '')"
		Else
			Select Case LastSong.Mood
			Case "Morose"
				QueryString = QueryString & " AND (Mood = 'Morose' OR Mood = 'Tranquil'"
			Case "Tranquil"
				QueryString = QueryString & " AND (Mood = 'Morose' OR Mood = 'Tranquil' OR Mood = 'Mellow'"
			Case "Mellow"
				QueryString = QueryString & " AND (Mood = 'Tranquil' OR Mood = 'Mellow' OR Mood = 'Neutral'"
			Case "Neutral"
				QueryString = QueryString & " AND (Mood = 'Mellow' OR Mood = 'Neutral' OR Mood = 'Upbeat'"
			Case "Upbeat"
				QueryString = QueryString & " AND (Mood = 'Neutral' OR Mood = 'Upbeat' OR Mood = 'Wild'"
			Case "Wild"
				QueryString = QueryString & " AND (Mood = 'Wild' OR Mood = 'Upbeat'"
			End Select
			' Allow untagged files to be played at any time
			QueryString = QueryString & " OR Mood = '') "
		End If
	End If

	Set LastSong = Nothing
	
	QueryString = QueryString & " ORDER BY (PlayCounter/SkipCount) DESC, RANDOM(*)"
	Set Iter = SDB.Database.QuerySongs(QueryString)
	
	Do Until Iter.EOF
		' Check if tracks can be inserted into the Now Playing list
		If IsTrackOK(Iter.Item) Then
			If SDB.Tools.FileSystem.FileExists(Iter.Item.Path) Then
				DbgMsg("NowPlayingAdd '" & Iter.Item.ArtistName & " - " & Iter.Item.Title & "'")
				
				Set GenerateNewTrack = Iter.Item
				Set Iter = Nothing
				Exit Function
			Else
				DbgMsg("Rejecting " & Iter.Item.ArtistName & " - " & Iter.Item.Title & ": File does not exist")
			End If	
		End If
		Iter.Next
	Loop

	' Emergency Measure: Select random played track
	DbgMsg("Panic 1: Selecting random played track")
	
	Set Iter = SDB.Database.QuerySongs("PlayCounter > 0 ORDER BY RANDOM(*) LIMIT 1")
	If Iter.EOF Then
		' Emergency Measure 2: Select random track
		DbgMsg("Panic 2: Selecting random track")
		
		Set Iter = SDB.Database.QuerySongs("ORDER BY RANDOM(*) LIMIT 1")
		If Iter.EOF Then
			' There is nothing we can do about it; there are probably no tracks in the library
			DbgMsg("Giving up: No suitable track has been found")
			
			Set Iter = Nothing
			Set GenerateNewTrack = Nothing
			Exit Function
		End If
	End If
		
	Set GenerateNewTrack = Iter.Item
	
	' All OK -> Tell about now playing song
	DbgMsg("NowPlayingAdd " & Iter.Item.ArtistName & " - " & Iter.Item.Title)
	
	Set Iter = Nothing
End Function
